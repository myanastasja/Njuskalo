for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
print(description[i])
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
}
#Then go through regular articles
###### This is in 2 loops instead of one as bindindg these two types of articles with c(,) creates "list" and gives following error
###### Error in UseMethod("xml_find_all") : no applicable method for 'xml_find_all' applied to an object of class "list"
for (i in (length(vauvauarticles)+1):(length(vauvauarticles)+length(regulararticles))) {
fullprice[i] <- html_text(html_nodes(regulararticles, css=".price")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(regulararticles, css=".entity-description-main")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
print(description[i])
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
}
df <- data.frame(kilometers, fullprice, price_EUR, price_HRK, row.names = NULL)
#### SET UP
library(tidyverse) # Load core Tidyverse packages, including dplyr
library(rvest)     # Additional Tidyverse packages for web scraping
library(xml2)      # Package to work with XML files
#### SCRAPE - "skoda-octavia" to become input parameter in future upgrades
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia'
myfile <- "skoda-octavia.html"
##### Until I figure out how to deal with captcha, I will manually copy/paste page source code into a local file
# mypage <- read_html(myurl)
mypage <- read_html(myfile)
vauvauarticles <- mypage %>%
html_elements(css=".EntityList-item--VauVau .entity-body")
regulararticles <- mypage %>%
html_elements(css=".EntityList-item--Regular .entity-body")
#First go through Vau Vau articles
fullprice <- c()
price_EUR <- c()
price_HRK <- c()
description <- c()
kilometers <- c()
year <- c()
for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
print(description[i])
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
print(year[i])
}
#### SET UP
library(tidyverse) # Load core Tidyverse packages, including dplyr
library(rvest)     # Additional Tidyverse packages for web scraping
library(xml2)      # Package to work with XML files
#### SCRAPE - "skoda-octavia" to become input parameter in future upgrades
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia'
myfile <- "skoda-octavia.html"
##### Until I figure out how to deal with captcha, I will manually copy/paste page source code into a local file
# mypage <- read_html(myurl)
mypage <- read_html(myfile)
vauvauarticles <- mypage %>%
html_elements(css=".EntityList-item--VauVau .entity-body")
regulararticles <- mypage %>%
html_elements(css=".EntityList-item--Regular .entity-body")
#First go through Vau Vau articles
fullprice <- c()
price_EUR <- c()
price_HRK <- c()
description <- c()
kilometers <- c()
year <- c()
for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
print(year[i])
}
for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]") %>%
substr(., unlist(gregexpr(":", .))[1]+2, str_length(.)-1)
print(year[i])
}
#### SET UP
library(tidyverse) # Load core Tidyverse packages, including dplyr
library(rvest)     # Additional Tidyverse packages for web scraping
library(xml2)      # Package to work with XML files
#### SCRAPE - "skoda-octavia" to become input parameter in future upgrades
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia'
myfile <- "skoda-octavia.html"
##### Until I figure out how to deal with captcha, I will manually copy/paste page source code into a local file
# mypage <- read_html(myurl)
mypage <- read_html(myfile)
vauvauarticles <- mypage %>%
html_elements(css=".EntityList-item--VauVau .entity-body")
regulararticles <- mypage %>%
html_elements(css=".EntityList-item--Regular .entity-body")
#First go through Vau Vau articles
fullprice <- c()
price_EUR <- c()
price_HRK <- c()
description <- c()
kilometers <- c()
year <- c()
for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]") %>%
substr(., unlist(gregexpr(":", .))[1]+2, str_length(.)-1)
print(year[i])
}
#Then go through regular articles
###### This is in 2 loops instead of one as bindindg these two types of articles with c(,) creates "list" and gives following error
###### Error in UseMethod("xml_find_all") : no applicable method for 'xml_find_all' applied to an object of class "list"
for (i in (length(vauvauarticles)+1):(length(vauvauarticles)+length(regulararticles))) {
fullprice[i] <- html_text(html_nodes(regulararticles, css=".price")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(regulararticles, css=".entity-description-main")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]") %>%
substr(., unlist(gregexpr(":", .))[1]+2, str_length(.)-1)
}
df <- data.frame(description, year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL)
View(df)
library(tidyverse) # Load core Tidyverse packages, including dplyr
library(rvest)     # Additional Tidyverse packages for web scraping
library(xml2)      # Package to work with XML files
#### SCRAPE - "skoda-octavia" to become input parameter in future upgrades
##### Until I figure out how to deal with captcha, I will manually copy/paste page source code into a local file
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia'
myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia?page=16'
mypage <- read_html(myurl)
vauvauarticles <- mypage %>%
html_elements(css=".EntityList-item--VauVau .entity-body")
regulararticles <- mypage %>%
html_elements(css=".EntityList-item--Regular .entity-body")
library(tidyverse) # Load core Tidyverse packages, including dplyr
library(rvest)     # Additional Tidyverse packages for web scraping
library(xml2)      # Package to work with XML files
#### SCRAPE - "skoda-octavia" to become input parameter in future upgrades
##### Until I figure out how to deal with captcha, I will manually copy/paste page source code into a local file
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia'
# myurl <- 'https://www.njuskalo.hr/auti/skoda-octavia?page=16'
myurl <- "skoda-octavia-16.html" ##### THIS IS FALLBACK TO FILE
mypage <- read_html(myurl)
vauvauarticles <- mypage %>%
html_elements(css=".EntityList-item--VauVau .entity-body")
regulararticles <- mypage %>%
html_elements(css=".EntityList-item--Regular .entity-body")
fullprice <- c()
price_EUR <- c()
price_HRK <- c()
description <- c()
kilometers <- c()
year <- c()
for (i in 1:length(vauvauarticles)) {
fullprice[i] <- html_text(html_nodes(vauvauarticles, css=".price")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(vauvauarticles, css=".entity-description-main")[i]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]") %>%
substr(., unlist(gregexpr(":", .))[1]+2, str_length(.)-1)
print(year[i])
}
#Then go through regular articles
###### This is in 2 loops instead of one as bindindg these two types of articles with c(,) creates "list" and gives following error
###### Error in UseMethod("xml_find_all") : no applicable method for 'xml_find_all' applied to an object of class "list"
for (i in (length(vauvauarticles)+1):(length(vauvauarticles)+length(regulararticles))) {
fullprice[i] <- html_text(html_nodes(regulararticles, css=".price")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
price_EUR[i] <- substr(fullprice[i], 1, unlist(gregexpr("€", fullprice[i]))[1]-2) %>% ifelse(is.na(unlist(gregexpr("\\,", .))[1]), ., substr(., 1, str_length(.)-3)) %>% as.numeric()*1000
price_HRK[i] <- substr(fullprice[i], unlist(gregexpr("/", fullprice[i]))[1]+2, str_length(fullprice[i])-3) %>%
gsub("\\.", "", .) %>% gsub("\\,","", .) %>% as.numeric()/100
description[i] <- html_text(html_nodes(regulararticles, css=".entity-description-main")[i-length(vauvauarticles)]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
kilometers[i] <- substring(description[i], 1, unlist(gregexpr("\n", description[i]))[1]-1) %>%
substring(.,unlist(gregexpr(",", .))[1]+2,str_length(.)-3) %>%
strtoi()
year[i] <- substr(description[i], unlist(gregexpr("\n", description[i]))[1], unlist(gregexpr("\\.", description[i]))[1]) %>%
trimws(., which = c("both", "left", "right"), whitespace = "[ \t\r\n]") %>%
substr(., unlist(gregexpr(":", .))[1]+2, str_length(.)-1)
}
df <- data.frame(description, year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL)
View(df)
library(ggplot2)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = datasets),
verbatimTextOutput("summary"),
plotOutput("plot")
)
library(shiny)
datasets <- c("economics", "faithfuld", "seals")
ui <- fluidPage(
selectInput("dataset", "Dataset", choices = datasets),
verbatimTextOutput("summary"),
plotOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
verbatimTextOutput("summary"),
plotOutput("plot")
)
server <- function(input, output, session) {
dataset <- reactive({
get(input$dataset, "package:ggplot2")
})
output$summary <- renderPrint({
summary(dataset())
})
output$plot <- renderPlot({
plot(dataset())
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df
})
}
shinyApp(ui, server)
caryear <- distinct(df$year)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", witdh = 4, placeholder = "2023"),
tableOutput("table")
)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", width = 4, placeholder = "2023"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2023"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df
})
}
shinyApp(ui, server)
inputyear <- 2000
df[df$year == inputyear)]
df[df$year == inputyear]
View(df)
inputyear <- 2017
df[df$year == inputyear]
df[df$year == inputyear,]
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2023"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == get(input$year),]
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2023"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == get(input$year),]
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == get(input$year),]
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == 2017]
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == 2017,]
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == input$year,]
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == input$year,] %>% sort(df$price_EUR, decreasing = FALSE)
})
}
shinyApp(ui, server)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == input$year,] %>% sort(price_EUR, decreasing = FALSE)
})
}
shinyApp(ui, server)
df <- data.frame(year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL) %>% sort(price_EUR)
df <- data.frame(year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL) %>% sort(price_EUR, decreasing = FALSE)
df <- data.frame(year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL) %>% order(price_EUR, decreasing = FALSE)
df <- data.frame(year, kilometers, fullprice, price_EUR, price_HRK, row.names = NULL) %>% arrange(price_EUR)
View(df)
carmodel <- c("Škoda Octavia")
caryear <- unique(df$year)
ui <- fluidPage(
selectInput("carmodel", "Model", choices = carmodel),
textInput("year", "Year", placeholder = "2017"),
tableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderTable({
df[df$year == input$year,]
})
}
shinyApp(ui, server)
